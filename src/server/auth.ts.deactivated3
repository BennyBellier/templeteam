import { compareSync } from 'bcrypt'
import jwt from 'jsonwebtoken'
import { getServerSession } from 'next-auth/next';
import { type NextAuthOptions } from "next-auth";
import { JWT } from 'next-auth/jwt'
import GoogleProvider from 'next-auth/providers/google'
import CredentialsProvider from 'next-auth/providers/credentials'
import { prisma } from "@/server/db";

const MAX_AGE = 1 * 24 * 60 * 60

export const authOptions: NextAuthOptions = {
  providers: [
    // GoogleProvider({
    //   clientId: process.env.GOOGLE_CLIENT_ID!,
    //   clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    // }),
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        email: { label: 'Email', type: 'email' },
        password: { label: 'Password', type: 'password' },
      },
      async authorize(credentials) {
        if (!credentials) return null;

        console.log("Credentials ", credentials);

        const { email, password } = credentials;
        if (!email || !password) {
          throw new Error('Email and password are required');
        }

        const auth = await prisma.user.findFirst({
          where : {
            email: email
          }
        });
        if (!auth) {
          console.error(`Authentication error: no user found !`);

          throw new Error(
            'Authentication failed: Invalid credentials or user not found',
          );
        }
        let passwordValid = false;

        try {
          passwordValid = compareSync(
            password,
            auth.password,
          );
        } catch (error) {
          console.error('Error in password comparison', error);
          throw new Error('Authentication failed due to server error');
        }

        if (auth && passwordValid) {
          const {
            id,
            name,
            image,
            email
          } = auth;

          console.log({ id, name, image, email });

          return { id, name, image, email };
        } else {

          console.log(null);
          return null;
        }
      },
    }),
  ],
  session: {
    strategy: 'jwt',
    maxAge: MAX_AGE,
  },
  jwt: {
    maxAge: MAX_AGE,
    async encode({ token, secret }): Promise<string> {
      // Create a JWT using the jsonwebtoken library
      if (!token) {
        throw new Error('Token is undefined');
      }
      console.log("encode", typeof token, typeof secret);

      const { sub, ...tokenProps } = token;
      // Get the current date in seconds since the epoch
      const nowInSeconds = Math.floor(Date.now() / 1000);

      // Calculate the expiration timestamp
      const expirationTimestamp = nowInSeconds + MAX_AGE
      const jwtToken = jwt.sign(
        { uid: sub, ...tokenProps, exp: expirationTimestamp },
        secret,
        {
          algorithm: 'HS256',
        },
      );
      return jwtToken;
    },
    async decode({ token, secret }): Promise<JWT | null> {
      if (!token) {
        throw new Error('Token is undefined');
      }
      console.log("decode", typeof token, typeof secret);
      try {
        const decodedToken = jwt.verify(token, secret, {
          algorithms: ['HS256'],
        });
        return decodedToken as JWT;
      } catch (error) {
        console.error('JWT decode error', error);
        return null;
      }
    },
  },

  callbacks: {
    async signIn({ user, account }) {
      if (account?.provider === 'google') {
        //   Create user
        const { id, name, image } = user

        const existingUser = await prisma.user.findFirst({
          where: {
            id
          },
        })
        if (!existingUser?.id) {
          return false;
        }
      }

      return true
    },
    async session({ token, session }) {
      if (token) {
        session.user = {
          image: token.picture,
          id: (token.uid as string) || '',
          email: token.email,
          name: token.name,
        }
      }
      return session
    },
  },
  pages: {
    signIn: '/login',
  },
  debug: process.env.NODE_ENV !== "production"
}

export const getServerAuthSession = () => getServerSession(authOptions)