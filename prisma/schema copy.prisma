// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          Role      @default(Member)
  accounts      Account[]
  sessions      Session[]
}

enum Role {
  Developer
  Treasurer
  President
  Secretary
  Member
  Guest
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model YoutubeVideos {
  /// The unique identifier of the video
  /// @default {Generated by Youtube API}
  id String @id

  /// Title of the video
  title String

  /// Filename of the thumbnail
  thumbnail String

  /// Category of the video
  category String

  /// Date when the video has been published
  publishedAt DateTime
}

model BlogPosts {
  id String @id @default(uuid()) /// @zod.uuid()

  /// @zod.max(100, { message: "The title must be shorter than 100 characters" })
  title String

  /// Thumbnail of the blog ticket
  thumbnail String?

  /// Date when the post has to be published or been published
  /// @default {time when the database entry is created}
  published DateTime @default(now())

  // Date when the post has been updated
  // @default {time when database entry is updated}
  updatedAt DateTime @updatedAt

  /// Short description of the blog ticket
  /// @zod.max(255, { message: "The description must be shorter than 256 characters" })
  description String?

  /// Time to take to read all the blog ticket
  readTime Int?

  /// If the content of the blog ticket is on another website
  extraLink String?

  category BlogCategory

  @@unique([title, published], name: "unique_post")
}

enum BlogCategory {
  ALL
  ARTICLE
  EVENT
  INFORMATION
}

model ReferenceCategory {
  /// The unique identifier for the category of References
  /// @default {Generated by database}
  id Int @id @default(autoincrement())

  /// Name of the References
  name       String
  References References[]
}

model References {
  /// The unique identifier for the References
  /// @default {Generated by database}
  id String @id @default(uuid())

  /// name of the reference
  name String

  /// Filename of the image of reference
  img String?

  /// Link to website page or reference website
  href String?

  /// alt text for Image
  alt String

  /// Category of the reference
  category   ReferenceCategory @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@unique([id, name], name: "unique_reference")
}

model TeamMembers {
  id        String             @id @default(uuid())
  name      String             @unique
  nickname  String?
  videos    TeamMembersVideo[]
  imagePath String?            @unique
  imageAlt  String?
  skills    TeamMembersSkill[]
}

model TeamMembersVideo {
  id   String @id @default(uuid())
  path String @unique

  // relation
  TeamMember    TeamMembers? @relation(fields: [teamMembersId], references: [id])
  teamMembersId String?
}

model TeamMembersSkill {
  id      String @id @default(uuid())
  label   String
  percent Int

  // relation
  TeamMembers   TeamMembers? @relation(fields: [teamMembersId], references: [id])
  teamMembersId String?
}

model Photos {
  id     String @id @default(uuid())
  name   String
  alt    String
  src    String @unique
  width  Int
  height Int

  // author
  author     String
  authorLink String?
}

model Member {
  id             String   @id @default(uuid())
  lastname       String
  firstname      String
  birthdate      DateTime
  gender         String
  mail           String?  @unique
  phone          String?  @unique
  address        String
  city           String
  postalCode     String
  country        String
  photo          String?
  medicalComment String?

  legalGuardians LegalGuardian[] @relation("MemberLegalGuardian")
  files          File[]

  history History[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([lastname(sort: Asc), firstname(sort: Asc), birthdate])
  @@index([lastname, firstname, birthdate])
  @@index([gender])
  @@index([address, city, postalCode, country])
}

model LegalGuardian {
  id        String  @id @default(uuid())
  lastname  String
  firstname String
  phone     String  @unique
  mail      String? @unique

  members Member[]  @relation("MemberLegalGuardian")
  history History[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([lastname, firstname])
  @@index([mail])
  @@index([phone])
}

model File {
  id                 String         @id @default(uuid())
  year               DateTime // Ex: 01 Sept. 2024 for 2024/2025
  medicalCertificate String?
  paymentMethod      PaymentMethod?
  paymentDetails     String?
  paymentAmout       Float?
  undersigner        String
  signature          String
  member             Member         @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId           String
  courses            Course[]       @relation("FileCourses")

  history History[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([year(sort: Desc), memberId])
  @@index([memberId])
  @@index([year, memberId])
  @@index([paymentMethod])
  @@index([createdAt])
}

model Course {
  id          String     @id @default(uuid())
  name        String     @unique
  description String
  price       Float      @default(180.00)
  Files       File[]     @relation("FileCourses")
  schedule    Schedule[]

  history History[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([price(sort: Asc)])
}

model Schedule {
  id        String    @id @default(uuid())
  dayOfWeek DayOfWeek
  startHour DateTime
  endHour   DateTime

  Course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([dayOfWeek])
  @@index([startHour])
  @@index([endHour])
  @@index([courseId, dayOfWeek])
}

model History {
  id         String     @id @default(uuid())
  action     ActionType
  data       Json
  dateAction DateTime   @default(now())

  member   Member? @relation(fields: [memberId], references: [id], onDelete: SetNull)
  memberId String?

  legalGuardian   LegalGuardian? @relation(fields: [legalGuardianId], references: [id], onDelete: SetNull)
  legalGuardianId String?

  file   File?   @relation(fields: [fileId], references: [id], onDelete: SetNull)
  fileId String?

  course   Course? @relation(fields: [courseId], references: [id], onDelete: SetNull)
  courseId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([action, dateAction])
  @@index([memberId, action])
  @@index([legalGuardianId, action])
  @@index([fileId, action])
  @@index([courseId, action])
}

enum Gender {
  Male
  Female
  NotSpecified
}

enum ActionType {
  Create
  Modify
  Delete
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum PaymentMethod {
  Transfer
  Cheque
  Card
}
