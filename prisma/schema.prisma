// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model YoutubeVideos {
  /// The unique identifier of the video
  /// @default {Generated by Youtube API}
  id String @id

  /// Title of the video
  title String

  /// Filename of the thumbnail
  thumbnail String

  /// Category of the video
  category String

  /// Date when the video has been published
  publishedAt DateTime
}

model BlogPosts {
  id String @id @default(uuid()) /// @zod.uuid()

  /// @zod.max(100, { message: "The title must be shorter than 100 characters" })
  title String

  /// Thumbnail of the blog ticket
  thumbnail String

  /// Type of the post
  /// @default {Article}
  type String? @default("Article")

  /// Date when the post has to be published or been published
  /// @default {time when the database entry is created}
  published DateTime? @default(now())

  // Date when the post has been updated
  // @default {time when database entry is updated}
  updatedAt DateTime @updatedAt

  /// Short description of the blog ticket
  /// @zod.max(255, { message: "The description must be shorter than 256 characters" })
  description String?

  /// Time to take to read all the blog ticket
  readTime Int?

  /// If the content of the blog ticket is on another website
  extraLink String?

  @@unique([title, published], name: "unique_post")
}

model ReferenceCategory {
  /// The unique identifier for the category of References
  /// @default {Generated by database}
  id Int @id @default(autoincrement())

  /// Name of the References
  name       String
  References References[]
}

model References {
  /// The unique identifier for the References
  /// @default {Generated by database}
  id String @id @default(uuid())

  /// name of the reference
  name String

  /// Filename of the image of reference
  img String?

  /// Link to website page or reference website
  href String?

  /// alt text for Image
  alt String

  /// Category of the reference
  category   ReferenceCategory @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@unique([id, name], name: "unique_reference")
}

model TeamMembers {
  id        String             @id @default(uuid())
  name      String             @unique
  nickname  String?
  videos    TeamMembersVideo[]
  imagePath String?            @unique
  imageAlt  String?
  skills    TeamMembersSkill[]
}

model TeamMembersVideo {
  id   String @id @default(uuid())
  path String @unique

  // relation
  TeamMember    TeamMembers? @relation(fields: [teamMembersId], references: [id])
  teamMembersId String?
}

model TeamMembersSkill {
  id      String @id @default(uuid())
  label   String
  percent Int

  // relation
  TeamMembers   TeamMembers? @relation(fields: [teamMembersId], references: [id])
  teamMembersId String?
}

model Photos {
  id     String @id @default(uuid())
  name   String
  alt    String
  src    String @unique
  width  Int
  height Int

  // author
  author String
  authorLink String?
}
