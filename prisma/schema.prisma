generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String
  emailVerified DateTime?
  image         String?
  role          Role      @default(Member)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model YoutubeVideos {
  /// The unique identifier of the video
  /// @default {Generated by Youtube API}
  id          String   @id
  /// Title of the video
  title       String
  /// Filename of the thumbnail
  thumbnail   String
  /// Category of the video
  category    String
  /// Date when the video has been published
  publishedAt DateTime
}

model BlogPosts {
  /// @zod.uuid()
  id          String       @id @default(uuid())
  /// @zod.max(100, { message: "The title must be shorter than 100 characters" })
  title       String
  /// Thumbnail of the blog ticket
  thumbnail   String?
  /// Date when the post has to be published or been published
  /// @default {time when the database entry is created}
  published   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  /// Short description of the blog ticket
  /// @zod.max(255, { message: "The description must be shorter than 256 characters" })
  description String?
  /// Time to take to read all the blog ticket
  readTime    Int?
  /// If the content of the blog ticket is on another website
  extraLink   String?
  category    BlogCategory

  @@unique([title, published], name: "unique_post")
}

model ReferenceCategory {
  /// The unique identifier for the category of References
  /// @default {Generated by database}
  id         Int          @id @default(autoincrement())
  /// Name of the References
  name       String
  References References[]
}

model References {
  /// The unique identifier for the References
  /// @default {Generated by database}
  id         String            @id @default(uuid())
  /// name of the reference
  name       String
  /// Filename of the image of reference
  img        String?
  /// Link to website page or reference website
  href       String?
  /// alt text for Image
  alt        String
  categoryId Int
  category   ReferenceCategory @relation(fields: [categoryId], references: [id])

  @@unique([id, name], name: "unique_reference")
}

model TeamMembers {
  id        String             @id @default(uuid())
  name      String             @unique
  nickname  String?
  imagePath String?            @unique
  imageAlt  String?
  skills    TeamMembersSkill[]
  videos    TeamMembersVideo[]
}

model TeamMembersVideo {
  id            String       @id @default(uuid())
  path          String       @unique
  teamMembersId String?
  TeamMember    TeamMembers? @relation(fields: [teamMembersId], references: [id])
}

model TeamMembersSkill {
  id            String       @id @default(uuid())
  label         String
  percent       Int
  teamMembersId String?
  TeamMembers   TeamMembers? @relation(fields: [teamMembersId], references: [id])
}

model Photos {
  id         String  @id @default(uuid())
  name       String
  alt        String
  src        String  @unique
  width      Int
  height     Int
  author     String
  authorLink String?
}

model Member {
  id             String          @id @default(uuid())
  firstname      String
  lastname       String
  birthdate      DateTime
  gender         Gender          @default(NotSpecified)
  mail           String?         @unique
  phone          String?         @unique
  address        String
  city           String
  postalCode     String
  country        String
  medicalComment String?
  photo          String?
  files          File[]
  history        History[]
  legalGuardians LegalGuardian[] @relation("MemberLegalGuardian")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([lastname, firstname, birthdate])
  @@index([lastname, firstname, birthdate])
  @@index([gender])
  @@index([address, city, postalCode, country])
}

model LegalGuardian {
  id        String    @id @default(uuid())
  lastname  String
  firstname String
  phone     String    @unique
  mail      String?   @unique
  history   History[]
  members   Member[]  @relation("MemberLegalGuardian")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([lastname, firstname])
  @@index([mail])
  @@index([phone])
}

model File {
  id                 String         @id @default(uuid())
  year               DateTime
  paymentMethod      PaymentMethod?
  paymentDetails     String?
  paymentAmout       Float?
  undersigner        String
  signature          String
  memberId           String
  medicalCertificate String?
  member             Member         @relation(fields: [memberId], references: [id], onDelete: Cascade)
  history            History[]
  courses            Course[]       @relation("FileCourses")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@unique([year(sort: Desc), memberId])
  @@index([memberId])
  @@index([year, memberId])
  @@index([paymentMethod])
  @@index([createdAt])
}

model Course {
  id               String          @id @default(uuid())
  name             String          @unique
  description      String
  info             String?
  price            Float
  location         CourseLocation?
  history          History[]
  schedule         Schedule[]
  Files            File[]          @relation("FileCourses")
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@index([name])
  @@index([price])
}

model CourseLocation {
  id             String   @id @default(uuid())
  place          String
  city           String
  postalCode     String
  appleLocation  String
  googleLocation String
  courseId       String   @unique
  course         Course   @relation(fields: [courseId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([courseId])
}

model Schedule {
  id        String    @id @default(uuid())
  dayOfWeek DayOfWeek
  startHour DateTime
  endHour   DateTime
  courseId  String
  Course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([dayOfWeek])
  @@index([startHour])
  @@index([endHour])
  @@index([courseId, dayOfWeek])
}

model History {
  id              String         @id @default(uuid())
  action          ActionType
  data            Json
  memberId        String?
  legalGuardianId String?
  fileId          String?
  courseId        String?
  course          Course?        @relation(fields: [courseId], references: [id])
  file            File?          @relation(fields: [fileId], references: [id])
  legalGuardian   LegalGuardian? @relation(fields: [legalGuardianId], references: [id])
  member          Member?        @relation(fields: [memberId], references: [id])
  createdAt       DateTime       @default(now())

  @@index([action, createdAt])
  @@index([memberId, action])
  @@index([legalGuardianId, action])
  @@index([fileId, action])
  @@index([courseId, action])
}

enum Role {
  Developer
  Treasurer
  President
  Secretary
  Member
  Guest
}

enum BlogCategory {
  ALL
  ARTICLE
  EVENT
  INFORMATION
}

enum Gender {
  Male
  Female
  NotSpecified
}

enum ActionType {
  Create
  Modify
  Delete
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum PaymentMethod {
  Transfer
  Cheque
  Card
}
