generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified Boolean
  image         String?
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]

  @@index([email])
  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String   @unique
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?
  createdAt      DateTime
  updatedAt      DateTime

  @@index([userId, token])
  @@index([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  // type                 String
  // token_type           String?
  // session_state        String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime
  updatedAt  DateTime

  @@map("verification")
}

model YoutubeVideos {
  /// The unique identifier of the video
  /// @default {Generated by Youtube API}
  id          String   @id
  /// Title of the video
  title       String
  /// Filename of the thumbnail
  thumbnail   String
  /// Category of the video
  category    String
  /// Date when the video has been published
  publishedAt DateTime
}

model BlogPosts {
  /// @zod.uuid()
  id          String       @id @default(uuid())
  /// @zod.max(100, { message: "The title must be shorter than 100 characters" })
  title       String
  /// Thumbnail of the blog ticket
  thumbnail   String?
  /// Date when the post has to be published or been published
  /// @default {time when the database entry is created}
  published   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  /// Short description of the blog ticket
  /// @zod.max(255, { message: "The description must be shorter than 256 characters" })
  description String?
  /// Time to take to read all the blog ticket
  readTime    Int?
  /// If the content of the blog ticket is on another website
  extraLink   String?
  category    BlogCategory

  @@unique([title, published], name: "unique_post")
}

model ReferenceCategory {
  /// The unique identifier for the category of References
  /// @default {Generated by database}
  id         Int          @id @default(autoincrement())
  /// Name of the References
  name       String       @unique
  References References[]
}

model References {
  /// The unique identifier for the References
  /// @default {Generated by database}
  id         String            @id @default(uuid())
  /// name of the reference
  name       String
  /// Filename of the image of reference
  img        String?
  /// Link to website page or reference website
  href       String?
  /// alt text for Image
  alt        String
  categoryId Int
  category   ReferenceCategory @relation(fields: [categoryId], references: [id])

  @@unique([id, name], name: "unique_reference")
}

model TeamMembers {
  id        String             @id @default(uuid())
  name      String             @unique
  nickname  String?
  imagePath String?            @unique
  imageAlt  String?
  skills    TeamMembersSkill[]
  videos    TeamMembersVideo[]
}

model TeamMembersVideo {
  id            String       @id @default(uuid())
  path          String       @unique
  teamMembersId String?
  TeamMember    TeamMembers? @relation(fields: [teamMembersId], references: [id])
}

model TeamMembersSkill {
  id            String       @id @default(uuid())
  label         String
  percent       Int
  teamMembersId String?
  TeamMembers   TeamMembers? @relation(fields: [teamMembersId], references: [id])
}

model Photos {
  id         String  @id @default(uuid())
  name       String
  alt        String
  src        String  @unique
  width      Int
  height     Int
  author     String
  authorLink String?
}

model Member {
  id             String          @id @default(uuid())
  firstname      String
  lastname       String
  birthdate      DateTime
  gender         Gender          @default(NotSpecified)
  mail           String?         @unique
  phone          String?         @unique
  address        String
  city           String
  postalCode     String
  country        String
  medicalComment String?
  photo          String?
  files          File[]
  history        History[]
  legalGuardians LegalGuardian[] @relation("MemberLegalGuardian")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@unique([lastname, firstname, birthdate])
  @@index([lastname, firstname, birthdate])
  @@index([gender])
  @@index([address, city, postalCode, country])
}

model LegalGuardian {
  id        String    @id @default(uuid())
  lastname  String
  firstname String
  phone     String    @unique
  mail      String?   @unique
  history   History[]
  members   Member[]  @relation("MemberLegalGuardian")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([lastname, firstname])
  @@index([mail])
  @@index([phone])
}

model File {
  id                 String         @id @default(uuid())
  season             String         @default("2024/2025")
  filename           String?
  paymentMethod      PaymentMethod?
  paymentDetails     String?
  paymentStatus      PaymentStatus  @default(Overdue)
  paymentAmout       Float?
  undersigner        String
  signature          String
  medicalCertificate String?
  memberId           String
  member             Member         @relation(fields: [memberId], references: [id], onDelete: Cascade)
  history            History[]
  courses            Course[]       @relation("FileCourses")
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@unique([season(sort: Desc), memberId])
  @@index([memberId])
  @@index([season])
  @@index([season, memberId])
  @@index([paymentMethod])
  @@index([createdAt])
}

model Course {
  name        String  @id
  description String
  info        String?
  price       Float

  sessions CourseSession[]
  history  History[]
  Files    File[]          @relation("FileCourses")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([price])
}

model CourseSessionLocation {
  id         String @id @default(uuid())
  place      String
  city       String
  postalCode String
  query      String

  courseSessions CourseSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([place, city, postalCode])
  @@index([place, city, postalCode])
}

model CourseSession {
  id        String    @id @default(uuid())
  dayOfWeek DayOfWeek
  startHour DateTime
  endHour   DateTime

  locationId String
  location   CourseSessionLocation @relation(fields: [locationId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [name], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([dayOfWeek, startHour, locationId])
  @@index([dayOfWeek])
  @@index([startHour])
  @@index([endHour])
  @@index([courseId, dayOfWeek])
}

model History {
  id              String         @id @default(uuid())
  action          ActionType
  data            Json
  memberId        String?
  legalGuardianId String?
  fileId          String?
  courseName      String?
  course          Course?        @relation(fields: [courseName], references: [name])
  file            File?          @relation(fields: [fileId], references: [id])
  legalGuardian   LegalGuardian? @relation(fields: [legalGuardianId], references: [id])
  member          Member?        @relation(fields: [memberId], references: [id])
  createdAt       DateTime       @default(now())

  @@index([action, createdAt])
  @@index([memberId, action])
  @@index([legalGuardianId, action])
  @@index([fileId, action])
  @@index([courseName, action])
}

enum BlogCategory {
  ALL
  ARTICLE
  EVENT
  INFORMATION
}

enum Gender {
  Male
  Female
  NotSpecified
}

enum ActionType {
  Create
  Modify
  Delete
}

enum DayOfWeek {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum PaymentMethod {
  Transfer
  Cheque
  Card
}

enum PaymentStatus {
  Paid
  Overdue
  PendingCollection
  InPart33
  InPart50
  InPart66
  ToBeCashed
}
