// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  imports = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  /// The unique identifier for the User
  /// @default {Generated by database}
  id String @id @default(cuid())

  /// name of the user (username)
  name String?

  /// unique for each user
  /// logical index
  email String? @unique

  /// Date wen user email has been verified
  emailVerified DateTime?

  /// name of user image
  image String?

  /// @zod.max(255)
  password String?   @db.VarChar(255)
  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model YoutubeVideos {
  /// The unique identifier of the video
  /// @default {Generated by Youtube API}
  id String @id

  /// Title of the video
  title String

  /// Filename of the thumbnail
  thumbnail String

  /// Category of the video
  category String

  /// Date when the video has been published
  publishedAt DateTime
}

model BlogPosts {
  id String @id @default(uuid()) /// @zod.uuid()

  /// @zod.max(100, { message: "The title must be shorter than 100 characters" })
  title String

  /// Thumbnail of the blog ticket
  thumbnail String

  /// Type of the post
  /// @default {Article}
  type String? @default("Article")

  /// Date when the post has to be published or been published
  /// @default {time when the database entry is created}
  published DateTime? @default(now())

  /// Short description of the blog ticket
  /// @zod.max(255, { message: "The description must be shorter than 256 characters" })
  description String?

  /// Time to take to read all the blog ticket
  readTime Int?

  /// If the content of the blog ticket is on another website
  extraLink String?

  @@unique([title, published], name: "unique_post")
}

model ReferenceCategory {
  /// The unique identifier for the category of References
  /// @default {Generated by database}
  id Int @id @default(autoincrement())

  /// Name of the References
  name       String
  References References[]
}

model References {
  /// The unique identifier for the References
  /// @default {Generated by database}
  id String @id @default(uuid())

  /// name of the reference
  name String

  /// Filename of the image of reference
  img String?

  /// Link to website page or reference website
  href String?

  /// alt text for Image
  alt String

  /// Category of the reference
  category   ReferenceCategory @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@unique([id, name])
}
